{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default (initialState => {\n  const [quotes, setQuotes] = useState(initialState);\n  const [updateQuotes, upQuotes] = useState(initialState);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    fetch(\"https://type.fit/api/quotes\").then(response => response.json()).then(jsonResponse => setQuotes(jsonResponse)).catch(err => setErrorMessage(err));\n  }, []);\n  return {\n    updateQuotes,\n    save: () => {\n      upQuotes(quotes[Math.floor(Math.random() * quotes.length)]);\n    },\n    errorMessage\n  };\n});","map":{"version":3,"sources":["/Users/graj/projects/random-quote/src/components/usetoState.js"],"names":["useState","useEffect","initialState","quotes","setQuotes","updateQuotes","upQuotes","errorMessage","setErrorMessage","fetch","then","response","json","jsonResponse","catch","err","save","Math","floor","random","length"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AAEA,gBAAgBC,YAAD,IAAkB;AAEjC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBJ,QAAQ,CAACE,YAAD,CAAnC;AAEA,QAAM,CAACG,YAAD,EAAcC,QAAd,IAA0BN,QAAQ,CAACE,YAAD,CAAxC;AAEE,QAAM,CAACK,YAAD,EAAcC,eAAd,IAAiCR,QAAQ,CAAC,EAAD,CAA/C;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZQ,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,YAAY,IAAIT,SAAS,CAACS,YAAD,CAF/B,EAGCC,KAHD,CAGOC,GAAG,IAAIP,eAAe,CAACO,GAAD,CAH7B;AAID,GALQ,EAKP,EALO,CAAT;AAOA,SAAO;AACLV,IAAAA,YADK;AAELW,IAAAA,IAAI,EAAG,MAAM;AACRV,MAAAA,QAAQ,CAACH,MAAM,CAACc,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAchB,MAAM,CAACiB,MAAhC,CAAD,CAAP,CAAR;AACJ,KAJI;AAKLb,IAAAA;AALK,GAAP;AAOD,CAtBD","sourcesContent":["import {useState,useEffect} from 'react';\n\nexport default (initialState) => {\n\nconst [quotes,setQuotes] = useState(initialState);\n\nconst [updateQuotes,upQuotes] = useState(initialState)\n\n  const [errorMessage,setErrorMessage] = useState(\"\");\n  \n  useEffect(()=>{\n    fetch(\"https://type.fit/api/quotes\")\n    .then(response => response.json())\n    .then(jsonResponse => setQuotes(jsonResponse))\n    .catch(err => setErrorMessage(err));\n  },[])\n \n  return {\n    updateQuotes,\n    save : () => {\n         upQuotes(quotes[Math.floor(Math.random()*quotes.length)]);\n    },\n    errorMessage\n  };\n}"]},"metadata":{},"sourceType":"module"}