{"version":3,"sources":["components/Header.js","components/Generate.js","components/PrintQuote.js","components/App.js","components/usetoState.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","title","flexGrow","Header","props","classes","AppBar","position","Toolbar","Typography","variant","className","Generate","save","Button","size","color","onClick","e","preventDefault","PrintQuote","Container","maxWidth","style","backgroundColor","height","quotes","text","author","href","target","startIcon","App","initialState","useState","setQuotes","updateQuotes","upQuotes","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","jsonResponse","catch","err","Math","floor","random","length","usetoState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"qRAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACLC,SAAU,OAkBDC,EAdA,SAACC,GACZ,IAAMC,EAAUP,IAChB,OACI,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACjB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWN,EAAQJ,OACzCG,EAAMH,U,gBCFJW,EAbE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAMf,OACQ,yBAAKF,UAAU,YACV,kBAACG,EAAA,EAAD,CAAQJ,QAAQ,WAAWK,KAAK,QAAQC,MAAM,UAAUC,QANpD,SAACC,GACdA,EAAEC,iBACFN,MAIS,wB,yBCYFO,EAnBI,SAAChB,GAChB,OACI,yBAAKO,UAAU,cACX,kBAACU,EAAA,EAAD,CAAWC,SAAS,KAAMC,MAAO,CAAEC,gBAAiB,UAAWC,OAAQ,SACnE,4BAAKrB,EAAMsB,OAAOC,MAClB,2BAAIvB,EAAMsB,OAAOE,QAChBxB,EAAMsB,OAAOC,KAAO,kBAACb,EAAA,EAAD,CAAQe,KAAM,yCAA2CzB,EAAMsB,OAAOC,KAAO,MAAQvB,EAAMsB,OAAOE,OAAQE,OAAO,SAC9HpB,QAAQ,YACRK,KAAK,QACLC,MAAM,UACNe,UAAW,kBAAC,IAAD,OAJE,SAOP,M,QCGfC,MAbf,WAAgB,IAAD,ECLA,SAACC,GAAkB,IAAD,EAENC,mBAASD,GAFH,mBAE1BP,EAF0B,KAEnBS,EAFmB,OAIDD,mBAASD,GAJR,mBAI1BG,EAJ0B,KAIbC,EAJa,OAMMH,mBAAS,IANf,mBAM1BI,EAN0B,KAMbC,EANa,KAe/B,OAPAC,qBAAU,WACRC,MAAM,+BACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIV,EAAUU,MAC/BC,OAAM,SAAAC,GAAG,OAAIR,EAAgBQ,QAC9B,IAEK,CACLX,eACAvB,KAAO,WACFwB,EAASX,EAAOsB,KAAKC,MAAMD,KAAKE,SAASxB,EAAOyB,WAErDb,gBDduCc,CAAW,IAA7ChB,EADM,EACNA,aAAavB,EADP,EACOA,KAAKyB,EADZ,EACYA,aAEzB,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAAQV,MAAM,2BACd,kBAAC,EAAD,CAAUY,KAAMA,IACdyB,EACoC,GAArC,kBAAC,EAAD,CAAYZ,OAAQU,MEHPiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.276daf8d.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n      flexGrow: 1,\n    },\n  }));\n\nconst Header = (props) => {\n    const classes = useStyles();\n    return(\n        <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            {props.title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    )\n\n}\n\nexport default Header;\n\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nconst Generate = ({save}) => {\n\n    const generate = (e) => {\n        e.preventDefault();\n        save();\n    }\n    return(\n            <div className=\"Generate\">\n                 <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={generate}>Generate New Quote</Button>\n           </div>\n    )       \n}\n\nexport default Generate;","import React from 'react';\nimport {Button, Container} from '@material-ui/core';\nimport TwitterIcon from '@material-ui/icons/Twitter';\n\nconst PrintQuote = (props) => {\n    return (\n        <div className=\"printQuote\">\n            <Container maxWidth=\"sm\"  style={{ backgroundColor: '#cfe8fc', height: 'auto' }} >\n                <h1>{props.quotes.text}</h1>\n                <p>{props.quotes.author}</p>\n                {props.quotes.text ? <Button href={'https://twitter.com/intent/tweet?text=' + props.quotes.text + ' - ' + props.quotes.author} target=\"_blank\"\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        startIcon={<TwitterIcon />}\n                    >\n                        Tweet\n                    </Button>:''}\n            </Container>\n        </div>\n    )\n}\n\nexport default PrintQuote;","import React from 'react';\nimport Header from './Header';\nimport '../App.css';\nimport Generate from './Generate';\nimport PrintQuote from './PrintQuote';\nimport usetoState from './usetoState';\n\nfunction App() {\n  const {updateQuotes,save,errorMessage} = usetoState([])  //Seperated state Logic\n\n  return (\n    <div className=\"App\" >\n      <Header title=\"Random Quote Generator\"/>\n      <Generate save={save}/>\n      {!errorMessage?\n      (<PrintQuote quotes={updateQuotes}/>):\"\"}\n    </div>\n  );\n}\n\nexport default App;\n","import {useState,useEffect} from 'react';\n\nexport default (initialState) => {\n\nconst [quotes,setQuotes] = useState(initialState);\n\nconst [updateQuotes,upQuotes] = useState(initialState)\n\nconst [errorMessage,setErrorMessage] = useState(\"\");\n  \n  useEffect(()=>{\n    fetch(\"https://type.fit/api/quotes\")\n    .then(response => response.json())\n    .then(jsonResponse => setQuotes(jsonResponse))\n    .catch(err => setErrorMessage(err));\n  },[])\n \n  return {\n    updateQuotes,\n    save : () => {\n         upQuotes(quotes[Math.floor(Math.random()*quotes.length)]);\n    },\n    errorMessage\n  };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}